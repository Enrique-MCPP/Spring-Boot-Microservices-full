spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order-service
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update

server.port=0

eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka
spring.application.name=order-service
#Para habilitar el actuator
management.health.circuitbreakers.enabled=true
#Para habilitar todos los endpoint en el actuator
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always


feign.circuitbreaker.enabled=true
#Resilience Properties
#Llamo a la instancia "inventory" cuyo nombre va a ser utilizado en controller, service, etc con el atributo name en las anotaciones de circuitBreaker
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
#Si fallan 5 request se pasa de closed to open
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
#Con el 50% que fallen, vale para cambiar de estado
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
#Antes de cambiar de estado a HalfOpen, espera 5seg
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
#Antes de cambiar de estado a HalfOpen, env�a 3 calls para que resilience4j compruebe si la comunicaci�n entre servciios est� bien o no.
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true


#Resilience Timeout Properties 
resilience4j.timelimiter.instances.inventory.timeout-duration=3s


#Resilience Retry Properties 
resilience4j.retry.instances.inventory.max-attempts=3
#En 5 seg, Timeout, le pasa la responsabilidad a CircuitBreaker
resilience4j.retry.instances.inventory.wait-duration=5s

##docker run -d -p 9411:9411 openzipkin/zipkin
spring.zipkin.base-url=http://localhost:9411
## Queremos que pasen el 100% de las trazas por zipkin
spring.sleuth.sampler.probability= 1.0

# Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
##Para que por defecto el asunto del mensaje sea este
spring.kafka.template.default-topic=notificationTopic
##En el producer usamos serializer para enviar la informaci�n
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
##Para convertir el String a JSon
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.programmingtechie.orderservice.event.OrderPlacedEvent