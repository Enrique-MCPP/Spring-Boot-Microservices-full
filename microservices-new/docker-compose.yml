---
version: '2.2'
services:
  portainer:
    image: portainer/portainer-ce:latest
    cpus: 0.5
    mem_limit: 200m
    container_name: portaine
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer-data:/data
    ports:
      - "9000:9000"
  ## MySQL Docker Compose Config
  postgres-order:
    container_name: postgres-order
    image: postgres
    cpus: 0.5
    mem_limit: 200m
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
      #De esta forma los datos de /data/postgres serán guardados en mi máquina en una carpeta llamada postgres-order
    volumes:
      - ./postgres-order:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: unless-stopped

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    cpus: 0.5
    mem_limit: 200m
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
    volumes:
      - ./postgres-product:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped

  postgres-product:
    container_name: postgres-product
    image: postgres
    cpus: 0.5
    mem_limit: 200m
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
    volumes:
      - ./postgres-inventory:/data/postgres
    ports:
      - "5433:5433"
    restart: unless-stopped

  postgres-supplier:
    container_name: postgres-supplier
    image: postgres
    cpus: 0.5
    mem_limit: 200m
    environment:
      POSTGRES_DB: supplier-service
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
    volumes:
      - ./postgres-supplier:/data/postgres
    ports:
      - "5434:5434"
    restart: unless-stopped
      
      ## Mongo Docker Compose Config
      ##mongo:
      ## container_name: mongo
      ##image: mongo:4.4.14-rc0-focal
      ##cpus: 0.5
      ##mem_limit: 200m
      ##restart: unless-stopped
      ## ports:
      ##   - "27017:27017"
      ##expose:
    ##  - "27017"
    ## volumes:
    ## - ./mongo-data:/data/db

  ## Keycloak Config with Mysql database
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:5.7
    cpus: 0.5
    mem_limit: 200m
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.0
    cpus: 0.8
    mem_limit: 300m
    #Para que al empezar tengamos los datos del realm
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql
  ## kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    cpus: 0.5
    mem_limit: 200m
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    cpus: 0.5
    mem_limit: 200m
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      #PLAINTEXT://localhost:9092 es sin docker desde  application.properties y PLAINTEXT_INTERNAL://broker:29092 es para contenedores de docker desde el application-docker.properties
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    cpus: 0.5
    mem_limit: 200m
    container_name: zipkin
    ports:
      - "9411:9411"

  ## Eureka Server
  discovery-server:
    image: kikemcpp/discovery-server:latest
    cpus: 0.5
    mem_limit: 200m
    container_name: discovery-server
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      #Siempre que esté esto activo en docker estará activo el application-docker.properties
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin

  api-gateway:
    image: kikemcpp/api-gateway:latest
    cpus: 0.5
    mem_limit: 200m
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - zipkin
      - discovery-server
      - keycloak

  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    image: kikemcpp/product-service:latest
    cpus: 0.5
    mem_limit: 200m
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-product:5433/product-service
    depends_on:
      - postgres-product
      - discovery-server
      - api-gateway

  supplier-service:
    container_name: supplier-service
    image: kikemcpp/suppliers:latest
    cpus: 0.5
    mem_limit: 200m
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-product:5434/supplier-service
    depends_on:
      - postgres-supplier
      - discovery-server
      - api-gateway

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    image: kikemcpp/order-service:latest
    cpus: 0.5
    mem_limit: 200m
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - "SPRINGPROFILES=prod,actuator"
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order-service
    depends_on:
      - postgres-order
      - broker
      - zipkin
      - discovery-server
      - api-gateway

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: kikemcpp/inventory-service:latest
    cpus: 0.5
    mem_limit: 200m
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      #Con la siguiente varibale de entorno, sobreescribes lo que haya en el application-docker.properties
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
    depends_on:
      - postgres-inventory
      - discovery-server
      - api-gateway

  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    image: kikemcpp/notification-service:latest
    cpus: 0.5
    mem_limit: 200m
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway

  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.1
    cpus: 0.5
    mem_limit: 200m
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    #Queremos monitorizar los siguiente servicios
    depends_on:
      - product-service
      - inventory-service
      - order-service
      - notification-service

  grafana:
    image: grafana/grafana-oss:8.5.2
    cpus: 0.5
    mem_limit: 200m
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password